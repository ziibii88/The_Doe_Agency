name: TDA_CI

# https://docs.github.com/en/actions/reference/events-that-trigger-workflows#example-using-multiple-events-with-activity-types-or-configuration
# Trigger only on push and pull_request, but only for main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DB_NAME: tda_db
  DB_USER: tda_user
  DB_PASS: tda_pass

jobs:
  build:
    # https://docs.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners#supported-runners-and-hardware-resources
    runs-on: ubuntu-latest
    # runs-on: ${{ matrix.os }}
    # Strategies disabled due to GitHub monthly minutes limitations.
    # strategy:
    #  matrix:
    #    os: [ubuntu-18.04, ubuntu-20.04]
    #    python-version: [3.7, 3.8, 3.9]
    #    postgres-version: [11.8, 12.3, 13.3]
    services:
      postgres:
        # https://hub.docker.com/_/postgres?tab=description
        # image: postgres:${{ matrix.postgres-version}}-alpine
        image: postgres:13-alpine
        env:
          POSTGRES_DB: $DB_NAME
          POSTGRES_USER: $DB_USER
          POSTGRES_PASSWORD: $DB_PASS
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      # https://github.com/marketplace/actions/checkout
      - uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-python
      # - name: setup python ${{ matrix.python-version }}
      - name: setup python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
          # python-version: ${{ matrix.python-version }}
      # install package prerequisites, such as psycopg2
      - name: install prerequisites
        run: sudo apt install python-dev libpq-dev
      # install project dependencies via poetry
      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python -
          poetry install
      # setup project, make directories, copy local_settings
      - name: configure project
        run: |
          mkdir logs && mkdir media && mkdir static
          cp envs/.dev-env .env
      # initialize database with migrations
      # - name: run migrations
      #   env:
      #     DB_NAME: $DB_NAME
      #     DB_USER: $DB_USER
      #     DB_PASS: $DB_PASS
      #   run: |
      #     poetry run python manage.py wait_for_db
      #     poetry run python manage.py migrate --noinput
      # run project tests with coverage report, linting with flake8
      - name: run tests
        env:
          DB_NAME: $DB_NAME
          DB_USER: $DB_USER
          DB_PASS: $DB_PASS
        run: |
          poetry run coverage run manage.py test
          poetry run coverage xml -o coverage.xml
          poetry run coverage report
          poetry run flake8
      # upload code coverage to codecov
      - uses: codecov/codecov-action@v1
        with:
          flags: unittests # optional
          name: codecov-tda # optional
          verbose: true # optional (default = false)
